package com.github.discordportier.server.model.api.response

import io.swagger.v3.oas.annotations.media.Schema
import org.zalando.problem.Problem
import java.net.URI

/**
 * A container showing how a [Problem] is serialised for OpenAPI purposes.
 *
 * **Do not return this from the API.**
 */
@Suppress("unused")
@Schema(
    description = """An OpenAPI3 definition equivalent of
        <a href="https://javadoc.io/static/org.zalando/problem/0.26.0/org/zalando/problem/Problem.html"><code>org.zalando.problem.Problem</code></a>.""",
)
interface OpenApiProblem {
    @Schema(
        name = "type",
        description = """An absolute URI that identifies the problem type.
            When dereferenced, it SHOULD provide human-readable documentation for the problem type (e.g., using HTML).
            When this member is not present, its value is assumed to be <code>about:blank</code>.""",
    )
    fun getType(): URI?

    @Schema(
        name = "title",
        description = """A short, human-readable summary of the problem type.
            It SHOULD NOT change from occurrence to occurrence of the problem, except for purposes of localisation.""",
    )
    fun getTitle(): String?

    @Schema(
        name = "status",
        description = "The HTTP status code generated by the origin server for this occurrence of the problem.",
    )
    fun getStatus(): Int?

    @Schema(
        name = "detail",
        description = "A human readable explanation specific to this occurrence of the problem.",
    )
    fun getDetail(): String?

    @Schema(
        name = "instance",
        description = "An absolute URI that identifies the specific occurrence of the problem." +
                "It may or may not yield further information if dereferenced.",
    )
    fun getInstance(): URI?

    @Schema(
        name = "parameters",
        description = "Optional, additional attributes of the problem." +
                "Implementations can choose to ignore this in favor of concrete, typed fields.",
    )
    fun getParameters(): Map<String, Any?>?
}
